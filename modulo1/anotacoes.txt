> Instalando o phpUnit
composer require --dev  phpunit/phpunit ^7

> Rodando o php phpUnit
./vendor/phpunit/phpunit/phpunit

> Da pra criar um "alias" no linux para rodar usando apenas "phpunit"

> Dentro do .bashrc, na ultima linha, adicione:
alias phpunit='./vendor/phpunit/phpunit/phpunit'

> Salve o arquivo e rode o comando "bash" para atualizar seus bashs


** Write and run your first test: An introduction to assertions **


> Todas classes de testes precisam extender de "TestCase"

> Roda os seus testes
./vendor/phpunit/phpunit/phpunit <caminho da pasta de testes>

> Criando um método de testes
public function testMethodName(){}

> Assertion: São basicamente verificações de alguma condição é verdadeira

> Fazendo um assert, no seu método, basta chamar o seguinte método
$this->assertEquals($meu_valor, $resultado_esperado);


> Rodar testes no phpUnit é basicamente criar uma classe que extende de "TestCase", criar 
métodos publicos que iniciam com "test" no nome e gerar um assert para validar o teste


** Test a function: using multiple assertions **


> Teste unitários geralmente testam o comportamento (behaviour) de uma função ou uma classe 

> Uma boa prática é escrever os nomes do seus métodos de testes de maneira mais descritiva possível,
falando exatamente o que ele vai fazer 
> Exemplo:
    public function testAddReturnsTheCorrectSum(){}

> É possível ter mais de um assert em um método


** Test that incorrect results are not returned: using multiple test methods **

> Pode ter mais de um teste em uma classe de testes.
> A ideia de uma classe de testes é testar todos os aspectos do seu código
> Até o momento usamos apenas o "assertEquals()" e o "assertNotEquals()", mas o phpUnit disponibiliza 
uma lista de metodos para asserções, basta checar a documentação


** Test a class: fixing bugs through testing **

> Além de funções, podemos também testar classes
> Uma boa prática é colocar como nome da sua classe de teste o nome da classe que será testada + Test


** How to name yout test methods **

> Criamos sempre métodos publicos nas nossas classes de teste, junto do prefixo "test" + nome do teste
> A ideia por tras dos nomes dos métodos de teste é você fazer eles o mais descritivos possível, exatamente
o que o método está testando
> Como se fosse uma documentação de código

> Uma outra maneira é adicionar a annotation @test dentro do docblock

/**
* @test
*/
public function userHasFirstName(){}

